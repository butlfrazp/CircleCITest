version: 2.1

parameters:
  run_all:
    type: boolean
    default: false
  build_code:
    type: boolean
    default: false
  build_infrastructure:
    type: boolean
    default: false
  markdown_linter:
    type: boolean
    default: false
  

orbs:
  terraform: "circleci/terraform@3.1.0"
  win: circleci/windows@5.0

executors:
  markdown_linter:
    docker:
      - image: davidanson/markdownlint-cli2

commands:
  lint_markdown:
    description: "markdown linting"
    steps:
      - run: markdownlint-cli2 "**/*.md"

  check_init_and_plan_terraform:
    description: "terraform init and plan"
    steps:
      - run:
          name: terraform init & plan
          command: |
            if ! terraform -chdir=terraform fmt -check -list=false; then
              echo "There was an error linting please run 'terraform fmt' and push the formatted changes"
              exit 1
            fi

            terraform -chdir=terraform init -input=false
            terraform -chdir=terraform plan -out tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  build_test:
    description: "build and test csharp code!"
    parameters:
      threshold:
        default: 50
        type: integer
    steps:
      - checkout
      - run:
          name: Get report generator
          command: dotnet tool install dotnet-reportgenerator-globaltool --version 5.1.10 --tool-path Tools/
      - run:
          name: Restore solution dependencies and tools
          command: dotnet restore CircleCiTestFunction/CircleCiTestFunction.sln
      - run:
          name: Build solution 
          command: dotnet build CircleCiTestFunction/CircleCiTestFunction.sln
      - run:
          name: Run tests and build coverage report
          command: |
            # build reports even if dotnet test fails, then throw to inform Circle CI to mark the step as failed

            $test_projs = Get-ChildItem -Inlcude "*.UnitTests.csproj" -Recurse
            $test_results_dir = (Get-Location).Path+"/TestResults/"
            $coverage_reports_dir = (Get-Location).Path+"/CoverageReports/"
            $test_success = $true

            foreach($test_proj in $test_projs) {
              dotnet test ${test_proj.FullName} `
                /p:Threshold=<< parameters.threshold >> `
                /p:CollectCoverage=true `
                /p:CoverletOutputFormat=cobertura `
                --logger:"junit;LogFilePath=TestResults/NUnit-${test_proj.Name}.xml"

              $test_success = $test_success -and $?
              $cobertura_output = (Split-Path -Path ${test_proj.FullName}) + "/coverage.cobertura.xml"

              ./Tools/reportgenerator `
                -reports:$cobertura_output `
                -targetdir:"$coverage_reports_dir/${test_proj.Name}"
            }

            if(!$test_succeeded) {
              throw "Failure running tests."
            }

      - store_test_results:
          path: TestResults/
      - store_artifacts:
          path: TestResults/
      - store_artifacts:
          path: CoverageReports/

jobs:
  lint_documents:
    executor: markdown_linter
    steps:
      - checkout
      - lint_markdown

  build_test:
    executor:
      name: win/default
    steps:
      - build_test

  lint_init_plan_terraform:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - check_init_and_plan_terraform

workflows:
  version: 2
  linting_documents:
    when: 
      or:
        - << pipeline.parameters.markdown_linter >>
        - << pipeline.parameters.run_all >>
    jobs:
      - lint_documents

  build_infrastructure:
    when:
      or:
        - << pipeline.parameters.build_infrastructure >>
        - << pipeline.parameters.run_all >>
    jobs:
      - lint_init_plan_terraform

  build_code:
    when:
      or:
        - << pipeline.parameters.build_code >>
        - << pipeline.parameters.run_all >>
    jobs:
      - build_test





