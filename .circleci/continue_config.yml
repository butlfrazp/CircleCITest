version: 2.1

parameters:
  run_all:
    type: boolean
    default: false
  build_code:
    type: boolean
    default: false
  build_infrastructure:
    type: boolean
    default: false
  markdown_linter:
    type: boolean
    default: false
  yaml_linter:
    type: boolean
    default: false

orbs:
  terraform: "circleci/terraform@3.1.0"
  win: circleci/windows@5.0

executors:
  markdown_linter:
    docker:
      - image: davidanson/markdownlint-cli2
  yaml_linter:
    docker:
      - image: sdesbure/yamllint

commands:
  lint_markdown:
    description: "markdown linting"
    steps:
      - run: markdownlint-cli2 "**/*.md"

  lint_yaml:
    description: "YAML linting"
    steps:
      - run: yamllint .

  check_init_and_plan_terraform:
    description: "terraform init and plan"
    steps:
      - run:
          name: terraform init & plan
          command: |
            if ! terraform -chdir=terraform fmt -check -list=false; then
              echo "There was an error linting. Please run 'terraform fmt' \
                and push the formatted changes."
              exit 1
            fi

            terraform -chdir=terraform init -input=false
            terraform -chdir=terraform plan -out tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  build_test:
    description: "build and test csharp code!"
    parameters:
      threshold:
        default: 50
        type: integer
    steps:
      - checkout
      - run:
          name: Get report generator
          command: dotnet tool install dotnet-reportgenerator-globaltool --version 5.1.10 --tool-path Tools/
      - run:
          name: Restore solution dependencies and tools
          command: dir "*.csproj" -Recurse | %{dotnet restore $_.FullName}
      - run:
          name: Build solution 
          command: dir "*.csproj" -Recurse | %{dotnet build $_.FullName}
      - run:
          name: Run tests and build coverage report
          command: |

            # run dotnet test on all projects ending in .UnitTests.csproj
            # There should be one [Name].UnitTests.csproj for every [Name].csproj
            $test_projs = Get-ChildItem -Include "*.UnitTests.csproj" -Recurse
            $test_results_dir = (Get-Location).Path+"/TestResults"
            $coverage_output_dir = (Get-Location).Path+"/CoverageReports/Build"
            $coverage_raw_dir =  (Get-Location).Path+"/CoverageReports/Raw"
            $test_success = $true

            foreach($test_proj in $test_projs) {
              # Include only the assembly being tested, this will prevent low coverage
              # on projects that the current test proj references but doesn't test.
              $assembly_name = "$((basename $test_proj) -replace ".UnitTests.csproj")"
              dotnet test $test_proj.FullName `
                /p:Threshold=<< parameters.threshold >> `
                /p:CollectCoverage=true `
                /p:CoverletOutputFormat=cobertura `
                /p:CoverletOutput="$coverage_raw_dir/$($test_proj.BaseName).xml" `
                /p:Include="[$assembly_name]*" `
                --logger:"junit;LogFilePath=$($test_results_dir)/NUnit-$($test_proj.BaseName).xml"

              # Continue running tests even if one fails, so that results for
              # all tests will be available regardless.
              $test_success = $test_success -and $?
            }

            # build all coverage XML reports into one HTML report
            ./Tools/reportgenerator `
              -reports:"$((Get-ChildItem $coverage_raw_dir  | %{ $_.FullName }) -join ';')" `
              -targetdir:"$coverage_output_dir/"

            # throw to mark step as failed in Circle CI
            if(!$test_success) {
              throw "Failure running tests."
            }

      - store_test_results:
          path: TestResults/
      - store_artifacts:
          path: TestResults/
      - store_artifacts:
          path: CoverageReports/Build/

jobs:
  lint_documents:
    executor: markdown_linter
    steps:
      - checkout
      - lint_markdown

  lint_pipeline_definitions:
    executor: yaml_linter
    steps:
      - checkout
      - lint_yaml

  build_test:
    executor:
      name: win/default
    steps:
      - build_test

  lint_init_plan_terraform:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - check_init_and_plan_terraform

workflows:
  version: 2
  linting_documents:
    when:
      or:
        - << pipeline.parameters.markdown_linter >>
        - << pipeline.parameters.run_all >>
    jobs:
      - lint_documents

  linting_pipeline_definitions:
    when:
      or:
        - << pipeline.parameters.yaml_linter >>
        - << pipeline.parameters.run_all >>
    jobs:
      - lint_pipeline_definitions

  build_infrastructure:
    when:
      or:
        - << pipeline.parameters.build_infrastructure >>
        - << pipeline.parameters.run_all >>
    jobs:
      - lint_init_plan_terraform:
          name: Build Infrastructure Dev
          context:
            - dev
          filters:
            branches:
              ignore: master
      - lint_init_plan_terraform:
          name: Build Infrastructure Prod
          context:
            - prod
          filters:
            branches:
              only: master

  build_code:
    when:
      or:
        - << pipeline.parameters.build_code >>
        - << pipeline.parameters.run_all >>
    jobs:
      - build_test
